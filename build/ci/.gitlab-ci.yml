include:
  - project: 'Ngen/devops-utilities'
    ref: dev
    file: 'yaml-templates/.gitlab-ci-msrv-template.yml'


# golang 1.18.1
image: openartifactory.checkpoint.com/docker-hub/golang:1.18.1


variables:
  REPO_NAME: fog-msrv-waap-tuning
  MIN_FUNCTION_COV: 100
  MIN_STATEMENT_COV: 0
  GO_LOGS_REPORT_DIR: "/root/artifacts/fog-logging-messages/golang"
  GOPRIVATE: "gitlab.ngen.checkpoint.com"

stages:
  - test
  - Push-To-ECR
  - Upload-Chart
  - Deploy-To-K8S
  - Review
  - Export

.gitlab_access: &gitlab_access |
  echo Granting Gitlab access
  echo "$GITLAB_CERT" >> /etc/ssl/certs/ca-certificates.crt
  echo "$GITLAB_CERT" > gitlab-cert.crt
  echo machine gitlab.ngen.checkpoint.com login "$GITLAB_USERNAME" password "$GITLAB_TOKEN" >> $HOME/.netrc
  echo machine gitlab.ngen.checkpoint.com login "$GITLAB_USERNAME" password "$GITLAB_TOKEN" > netrc

.google_application_access: &google_application_access |
  echo "$DEV_DATATUBE_SERVICE_ACCOUNT_JSON" > /tmp/cred.json
  export GOOGLE_APPLICATION_CREDENTIALS=/tmp/cred.json

sanity_test:
  stage: test
  script:
    - *gitlab_access
    - go test ./... -run ^TestSanity -tags sanity


format_and_lint:
  stage: test
  before_script:
    - *gitlab_access
    # install dependencies
    - GLINT_PKG_LIST=$(go list ./... | grep -Ev ''$(cat build/ci/glintExceptions | grep -v '#' | sed '/^$/d' | tr -d '\r' | tr '\n' '|' | sed 's/.$//')'')
    - echo GLINT_PKG_LIST = $GLINT_PKG_LIST
    - GIMPORTS_FILE_LIST=$(find -name "*.go" | grep -Ev ''$(cat build/ci/gimportsExceptions | grep -v '#' | sed '/^$/d' | tr -d '\r' | tr '\n' '|' | sed 's/.$//')'')
    - echo GIMPORTS_FILE_LIST = $GIMPORTS_FILE_LIST
  script:
    - go install golang.org/x/tools/cmd/goimports@latest
    - if [[ `goimports -l ${GIMPORTS_FILE_LIST} | tee /dev/stderr | wc -l` > 0 ]] ; then exit 1; fi
    - go install golang.org/x/lint/golint@latest
    - golint -set_exit_status ${GLINT_PKG_LIST}


# Runs all unit tests in this projects packages. A failed test will fail the stage.
# Note - go test also runs go vet by defualt - no need for additional vet stage
unit_tests:
  stage: test
  before_script:
    - *gitlab_access
    - *google_application_access
    - GTEST_PKG_LIST=$(go list ./... | grep -Ev ''$(cat build/ci/gtestExceptions | grep -v '#' | sed '/^$/d' | tr -d '\r' | tr '\n' '|' | sed 's/.$//')'')
    - echo GTEST_PKG_LIST = $GTEST_PKG_LIST
  script:
    - go test -short ${GTEST_PKG_LIST}


# Race detection is run on the tests here as we assume they cover most, if not all, of the code
# Seeing as race detection significantly reduces efficient of running the code, doing it over tests make sense
# Note - this will also run the unit tests, should they fail this stage will fail too
race_detector:
  stage: test
  before_script:
    - *gitlab_access
    - *google_application_access
    - GTEST_PKG_LIST=$(go list ./... | grep -Ev ''$(cat build/ci/gtestExceptions | grep -v '#' | sed '/^$/d' | tr -d '\r' | tr '\n' '|' | sed 's/.$//')'')
    - echo GTEST_PKG_LIST = $GTEST_PKG_LIST
  script:
    - go test -race -short ${GTEST_PKG_LIST}


code_coverage_report:
  stage: test
  before_script:
    - *gitlab_access
    - *google_application_access
    - GTEST_PKG_LIST=$(go list ./... | grep -Ev ''$(cat build/ci/gtestExceptions | grep -v '#' | sed '/^$/d' | tr -d '\r' | tr '\n' '|' | sed 's/.$//')'')
    - echo GTEST_PKG_LIST = $GTEST_PKG_LIST
  script:
    - curl -k -s -H "PRIVATE-TOKEN:"$GITLAB_ACCESS_TOKEN https://gitlab.ngen.checkpoint.com/api/v4/projects/190/repository/files/coverage-scripts%2Fci_go_coverage.sh/raw?ref=dev > ci_go_coverage.sh
    - chmod +x ci_go_coverage.sh
    - ./ci_go_coverage.sh $MIN_STATEMENT_COV $MIN_FUNCTION_COV $GTEST_PKG_LIST
  artifacts:
    paths:
      - coverage/coverage.html
      - coverage/coverage.cov
    when: always


upload-chart:
  variables:
    PATH_TO_HELM_CHART: "deployments/k8s/helm-chart"
  extends: .upload-chart


push-to-ECR:
  extends: .push-to-ECR
  before_script:
    - *gitlab_access
    - echo "Pushing to AWS ECR"
    - cp build/package/Dockerfile .

Code Review:
  stage: Review
  image: openartifactory.checkpoint.com/docker-hub/arcanist-phab
  script:
    - export operation=send-to-code-review
    - /home/./start-arc-scripts.sh
  except:
    - dev
    - master

Merge After Successful Review:
  stage: Export
  image: openartifactory.checkpoint.com/docker-hub/arcanist-phab
  script:
    - export operation=merge-after-successful-code-review
    - /home/./start-arc-scripts.sh
  when: manual
  except:
    - dev
    - master
