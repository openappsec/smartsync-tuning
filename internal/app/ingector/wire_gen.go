// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package ingector

import (
	"context"
	"openappsec.io/configuration"
	"openappsec.io/configuration/viper"
	"openappsec.io/health"
	"openappsec.io/smartsync-tuning/internal/app"
	"openappsec.io/smartsync-tuning/internal/app/drivers/crdlistener"
	"openappsec.io/smartsync-tuning/internal/app/drivers/eventconsumer"
	rest2 "openappsec.io/smartsync-tuning/internal/app/drivers/http/rest"
	"openappsec.io/smartsync-tuning/internal/app/drivers/scheduler"
	"openappsec.io/smartsync-tuning/internal/app/tuningdomain/v2"
	s3repository "openappsec.io/smartsync-tuning/internal/pkg/db/s3"
	"openappsec.io/smartsync-tuning/internal/pkg/db/sharedstorage"
	"openappsec.io/smartsync-tuning/internal/pkg/policy"
	"openappsec.io/smartsync-tuning/internal/pkg/query"
	"openappsec.io/smartsync-tuning/internal/pkg/query/pg"
)

// Injectors from wire.go:

// InitializeAppStandAlone is an Adapter injector
func InitializeAppStandAlone(ctx context.Context) (*app.StandAlone, error) {
	adapter := viper.NewViper()
	service, err := configuration.NewConfigurationService(adapter)
	if err != nil {
		return nil, err
	}
	healthService := health.NewService()
	queriesGen, err := pg.NewQueriesGen(service)
	if err != nil {
		return nil, err
	}
	driver := pg.NewPQDriver()
	queryAdapter, err := query.NewAdapter(ctx, service, queriesGen, driver)
	if err != nil {
		return nil, err
	}
	sharedstorageAdapter, err := sharedstorage.NewAdapter(service)
	if err != nil {
		return nil, err
	}
	readerClient, err := crdlistener.NewReader(service)
	if err != nil {
		return nil, err
	}
	s3repositoryAdapter, err := s3repository.NewAdapter(service)
	if err != nil {
		return nil, err
	}
	standAlone := tuning.NewStandAlone(service, queryAdapter, sharedstorageAdapter, readerClient, s3repositoryAdapter, readerClient)
	adapterStandAlone, err := rest2.NewAdapterStandAlone(service, healthService, standAlone)
	if err != nil {
		return nil, err
	}
	crdlistenerAdapter, err := crdlistener.NewAdapter(standAlone, readerClient, service)
	if err != nil {
		return nil, err
	}
	schedulerAdapter, err := scheduler.NewAdapter(service, standAlone)
	if err != nil {
		return nil, err
	}
	appStandAlone := app.NewAppStandAlone(service, healthService, adapterStandAlone, crdlistenerAdapter, schedulerAdapter)
	return appStandAlone, nil
}

// InitializeAppStandAloneDocker is an Adapter injector
func InitializeAppStandAloneDocker(ctx context.Context) (*app.StandAlone, error) {
	adapter := viper.NewViper()
	service, err := configuration.NewConfigurationService(adapter)
	if err != nil {
		return nil, err
	}
	healthService := health.NewService()
	queriesGen, err := pg.NewQueriesGen(service)
	if err != nil {
		return nil, err
	}
	driver := pg.NewPQDriver()
	queryAdapter, err := query.NewAdapter(ctx, service, queriesGen, driver)
	if err != nil {
		return nil, err
	}
	sharedstorageAdapter, err := sharedstorage.NewAdapter(service)
	if err != nil {
		return nil, err
	}
	policyAdapter, err := policy.NewAdapter(service)
	if err != nil {
		return nil, err
	}
	s3repositoryAdapter, err := s3repository.NewAdapter(service)
	if err != nil {
		return nil, err
	}
	standAlone := tuning.NewStandAlone(service, queryAdapter, sharedstorageAdapter, policyAdapter, s3repositoryAdapter, policyAdapter)
	adapterStandAlone, err := rest2.NewAdapterStandAlone(service, healthService, standAlone)
	if err != nil {
		return nil, err
	}
	dockerAdapter := eventconsumer.NewDockerAdapter()
	schedulerAdapter, err := scheduler.NewAdapter(service, standAlone)
	if err != nil {
		return nil, err
	}
	appStandAlone := app.NewAppStandAlone(service, healthService, adapterStandAlone, dockerAdapter, schedulerAdapter)
	return appStandAlone, nil
}
