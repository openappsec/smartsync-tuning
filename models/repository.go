package models

// ReportedAssetType is the type of the reported asset
type ReportedAssetType string

// Asset report const types
const (
	//ReportAll indicates the reported data contains all of the below
	ReportAll ReportedAssetType = "all"
	// ReportStatistics indicates the reported data is statistics
	ReportStatistics ReportedAssetType = "statistics"
	// ReportTuning indicated the reported data is tuning events
	ReportTuning ReportedAssetType = "tuning"
	// ReportTuningDecided indicates the report data is decided tuning events
	ReportTuningDecided ReportedAssetType = "tuning_decided"
	// ReportTrustedSourcesPolicy indicates the report data is trusted sources policy
	ReportTrustedSourcesPolicy ReportedAssetType = "trusted_sources_policy"
	// ReportAssetPolicyData indicates the report data is asset data derived from policy
	ReportAssetPolicyData ReportedAssetType = "asset_policy_data"
	// ReportAssetExceptions indicates the report data is exceptions data per asset
	ReportAssetExceptions ReportedAssetType = "asset_exceptions"
	// ReportCertificateInstallationStatus indicates the report data is certification installation status
	ReportCertificateInstallationStatus ReportedAssetType = "cert_status"
	// ReportUpstreamStatus indicates the report data is for the upstream healthcheck
	ReportUpstreamHealthcheckStatus ReportedAssetType = "upstream_status"
)

// Event types
const (
	EventTypeSource    = "source"
	EventTypeURL       = "url"
	EventTypeParamName = "parameterName"
	EventTypeParamVal  = "parameterValue"
)

// possible decisions
const (
	DecisionBenign    = "benign"
	DecisionMalicious = "malicious"
	DecisionUnknown   = "undecided"
	DecisionDismiss   = "dismiss"
	DecisionOverride  = "override"
)

// Behavior actions
const (
	OverrideAction = "action"
	ActionAccept   = "accept"
	ActionReject   = "reject"
)

// Metric represent a metric to display
type Metric struct {
	MetricKey string `json:"metric"`
	Count     int    `json:"count"`
}

// Decisions struct
type Decisions struct {
	Decisions []TuneEvent `json:"decisions"`
}

// Values list of values
type Values []string

// ValuesWithTime a pair of values and last modified unix timestamp
type ValuesWithTime struct {
	First  Values `json:"first"`
	Second int64  `json:"second"`
}

// MapKeyValue cereal representation of a map for confidence set
type MapKeyValue struct {
	Key   string         `json:"key"`
	Value ValuesWithTime `json:"value"`
}

// ValueWithLevel a pair of values and confidence level
type ValueWithLevel struct {
	Key   string  `json:"key"`
	Value float64 `json:"value"`
}

// MapKeyValueLevel cereal representation of a map for confidence level
type MapKeyValueLevel struct {
	Key   string           `json:"key"`
	Value []ValueWithLevel `json:"value"`
}

// ConfidenceData the content of confidence file generated by the agent
type ConfidenceData struct {
	ConfidenceSet    []MapKeyValue      `json:"confidence_set"`
	ConfidenceLevels []MapKeyValueLevel `json:"confidence_levels"`
}

// TuneEvent represents a tuning event
type TuneEvent struct {
	ID            string   `json:"id" bson:"id" yaml:"-"`
	Decision      string   `json:"decision" bson:"decision"`
	EventType     string   `json:"eventType" bson:"eventType"`
	EventTitle    string   `json:"eventTitle" bson:"eventTitle"`
	Severity      string   `json:"severity" bson:"severity"`
	LogQuery      string   `json:"logQuery" bson:"logQuery"`
	Metrics       []Metric `json:"metrics" bson:"metrics"`
	AttackTypes   []string `json:"attackTypes" bson:"attackTypes"`
	Enforced      bool     `json:"enforced" bson:"enforced"`
	PolicyVersion int      `json:"policyVersion" bson:"policyVersion"`
}

// Statistics contains WAAP statistics
type Statistics struct {
	AssetInfo         `json:"-" bson:"-"`
	Status            string `json:"status" bson:"status"`
	ElapsedTime       string `json:"elapsedTime" bson:"elapsedTime"`
	TotalRequests     int64  `json:"totalRequests" bson:"totalRequests"`
	CriticalRequests  int    `json:"criticalRequests" bson:"criticalRequests"`
	HighRequests      int    `json:"highRequests" bson:"highRequests"`
	UniqueURLs        int    `json:"uniqueUrls" bson:"uniqueURLs"`
	UniqueSources     int    `json:"uniqueSources" bson:"uniqueSources"`
	StartupTime       int64  `json:"startupTime" bson:"startupTime"`
	LegitRequests     int    `json:"legitimateRequests" bson:"legitimateRequests"`
	MalicRequests     int    `json:"maliciousRequests" bson:"maliciousRequests"`
	Readiness         int    `json:"readiness" bson:"readiness"`
	ReadinessDP       string `json:"readinessDisplayName" bson:"readinessDisplayName"`
	ReadinessTP       string `json:"readinessToolTip" bson:"readinessToolTip"`
	PrevLvlReqCount   int64  `json:"preLvlReqCount" bson:"preLvlReqCount"`
	Recommendation    int    `json:"recommendation" bson:"recommendation"`
	RecommendationDP  string `json:"recommendationDisplayName" bson:"recommendationDisplayName"`
	RecommendationTP  string `json:"recommendationToolTip" bson:"recommendationToolTip"`
	MitigationMode    string `json:"mitigationMode" bson:"mitigationMode"`
	MitigationLevel   string `json:"mitigationLevel" bson:"mitigationLevel"`
	RequestsFromStart int64  `json:"requestsFromStart" bson:"requestsFromStart"`
}

//AssetInfo the information of MGMT asset
type AssetInfo struct {
	TenantID string `json:"-"`
	AssetID  string `json:"-"`
}

// GetTenantID return tenant ID
func (info *AssetInfo) GetTenantID() string {
	return info.TenantID
}

// GetAssetID return asset ID
func (info *AssetInfo) GetAssetID() string {
	return info.AssetID
}

// ExceptionData contains single exception data
type ExceptionData struct {
	LastHitEvent   string `json:"lastHitEvent" bson:"lastHitEvent"`
	HitCount       int64  `json:"hitCount" bson:"hitCount"`
	SharedHitCount int64  `json:"sharedHitCount" bson:"sharedHitCount"`
}

// AssetExceptions contains mapping of exception id to exception data
type AssetExceptions struct {
	Exceptions map[string]ExceptionData `json:"exceptions,omitempty" bson:"exceptions,omitempty"`
}

// CertInstallStatus contains status of the certification installation
type CertInstallStatus struct {
	ProfileID string `json:"profileId,omitempty" bson:"profileId,omitempty"`
	CertType  string `json:"certType,omitempty" bson:"certType,omitempty"`
	URL       string `json:"url,omitempty" bson:"url,omitempty"`
	Status    string `json:"status,omitempty" bson:"status,omitempty"`
	Message   string `json:"message,omitempty" bson:"message,omitempty"`
}

// UpstreamHealthcheck contains status of the asset per agent
type UpstreamHealthcheck struct {
	Agent   string `json:"agentID" bson:"agentID"`
	Status  string `json:"status" bson:"status"`
	Message string `json:"message" bson:"message"`
}

//Attributes contains the attributes stored for an asset
type Attributes struct {
	Statistics           Statistics                     `json:"statistics" bson:"statistics,omitempty"`
	TuningEvents         []TuneEvent                    `json:"tuningEvents" bson:"tuningEvents,omitempty"`
	TuningEventsDecided  []TuneEvent                    `json:"tuningEventsDecided" bson:"tuningEventsDecided,omitempty"`
	TrustedSourcesPolicy TrustedSourcesPolicy           `json:"trustedSourcesPolicy" bson:"trustedSourcesPolicy,omitempty"`
	AssetExceptions      AssetExceptions                `json:"assetExceptions" bson:"assetExceptions,omitempty"`
	CertInstallStatus    map[string]CertInstallStatus   `json:"certInstallStatus" bson:"certInstallStatus,omitempty"`
	UpstreamStatus       map[string]UpstreamHealthcheck `json:"upstreamStatus" bson:"upstreamStatus"`
	AgentVersion         map[string]string              `json:"-" bson:"agentVersion,omitempty"`
	PolicyVersion        int64                          `json:"version" bson:"version,omitempty"`
	MgmtID               string                         `json:"mgmtId" bson:"mgmtId,omitempty"`
	ApplicationUrls      string                         `json:"applicationUrls" bson:"applicationUrls,omitempty"`
	Name                 string                         `json:"name" bson:"name,omitempty"`
	Type                 string                         `json:"type" bson:"type,omitempty"`
	Family               string                         `json:"family" bson:"family,omitempty"`
}

// S3File data structure for S3 getting file
type S3File struct {
	Data         []byte
	IsCompressed bool
	IsEncrypted  bool
}

// IsZero used to define that Statistics is empty
func (s Statistics) IsZero() bool {
	return s.StartupTime == 0
}

// IsZero used to define that TrustedSourcesPolicy is empty
func (tsp TrustedSourcesPolicy) IsZero() bool {
	return tsp.NumOfSources == 0
}

//Tokens hold the generated tokens for uri and parameters
type Tokens struct {
	URIsPatterns   [][]string `json:"urisPatterns"`
	ParamsPatterns [][]string `json:"paramsPatterns"`
}
